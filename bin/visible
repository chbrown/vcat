#!/usr/bin/env node
var visible = require('..');
var stream = require('stream');

var argvparser = require('optimist').options({
  help: {
    describe: 'print this help message',
    type: 'boolean',
  },
  version: {
    describe: 'print version',
    type: 'boolean',
    alias: 'v',
  },
  escapeSlash: {
    describe: 'Escape backslashes?',
    type: 'boolean',
    default: false,
  },
  literalVisibles: {
    describe: 'Use the literal character for simple characters?',
    type: 'boolean',
    default: true,
  },
  literalEOL: {
    describe: 'Preserve literal newlines?',
    type: 'boolean',
    default: true,
  },
  literalSpace: {
    describe: 'Preserve literal spaces?',
    type: 'boolean',
    default: true,
  },
  useControlCharacterNames: {
    describe: 'Use names for control characters?',
    type: 'boolean',
    default: false,
  },
  useBackslashEscapes: {
    describe: 'Use escapes for common ASCII control characters?',
    type: 'boolean',
    default: false,
  },
  base: {
    describe: 'How to format escaped characters?',
    type: 'string',
    default: 'hexadecimal',
  },
});

function createStream(escaper) {
  var transform = new stream.Transform({decodeStrings: true, objectMode: true});
  transform._transform = function(chunk, encoding, cb) {
    // `encoding` === 'buffer'
    var string = escaper.transformBuffer(chunk);
    cb(null, string);
  };
  transform._flush = function(cb) {
    cb(null, 'EOF'); // + os.EOL
  };
  return transform;
}

var argv = argvparser.argv;

if (argv.help) {
  argvparser.showHelp();
  process.exit(1);
}
else if (argv.version) {
  console.log(require('../package').version);
}
else {
  var escaper = new visible.Escaper(argv);
  var streamTransform = createStream(escaper);
  process.stdin.pipe(streamTransform).pipe(process.stdout);

  process.on('SIGINT', function() {
    process.stdin.unpipe(streamTransform);
    streamTransform.push('SIGINT');
    process.exit('SIGINT');
  });

  process.stdout.on('error', function() {
    // e.g., if we pipe into head or something
    process.exit(1);
  });
}
