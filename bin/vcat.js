#!/usr/bin/env node
'use strict'; /*jslint es5: true, node: true, indent: 2 */ /* globals setImmediate */
var os = require('os');
var visible = require('..');

var interrupted = false;
var chunk_size = 1;

var input = process.stdin;
var output = process.stdout;

var optimist = require('optimist')
  .describe({
    all: 'print all whitespace as character codes',

    help: 'print this help message',
    version: 'print version',
  })
  .boolean(['all', 'help', 'version'])
  .alias({all: 'a', version: 'v'});
var argv = optimist.argv;
var all = argv.all;

if (argv.help) {
  optimist.showHelp();
  process.exit(1);
}
else if (argv.version) {
  console.log(require('../package').version);
  process.exit(0);
}



function print(buffer) {
  for (var i = 0, l = buffer.length; i < l; i++) {
    var character = buffer[i];
    if (character > 32 && character < 127) {
      /** the characters from 33 to 126 are pretty normal; they are all one character wide and visible.

        33=!    34="    35=#    36=$    37=%    38=&    39='    40=(    41=)
        42=*    43=+    44=,    45=-    46=.    47=/    48=0    49=1    50=2
        51=3    52=4    53=5    54=6    55=7    56=8    57=9    58=:    59=;
        60=<    61==    62=>    63=?    64=@    65=A    66=B    67=C    68=D
        69=E    70=F    71=G    72=H    73=I    74=J    75=K    76=L    77=M
        78=N    79=O    80=P    81=Q    82=R    83=S    84=T    85=U    86=V
        87=W    88=X    89=Y    90=Z    91=[    92=\    93=]    94=^    95=_
        96=`    97=a    98=b    99=c   100=d   101=e   102=f   103=g   104=h
       105=i   106=j   107=k   108=l   109=m   110=n   111=o   112=p   113=q
       114=r   115=s   116=t   117=u   118=v   119=w   120=x   121=y   122=z
       123={   124=|   125=}   126=~

      (Generated by the following:)

          _.range(33, 128).map(function(code) { return (' ' + code).slice(-3) + '=' + String.fromCharCode(code) + ''; }).join('\t')

      So we just print them out verbatim.
      */
      // todo: consider all utf8 visibles
      output.write(buffer.slice(i, i+1));
    }
    else {
      output.write(visible.ANSI.INVERT);
      if (visible.literals[character]) {
        output.write(visible.literals[character]);
      }
      else {
        output.write('\\x' + character);
      }

      if (!all) {
        // we only literally print characters if -a --all was NOT specified at the command line
        if (character != 13 && character != 8) {
          // and even then we only literally print characters that don't obscure other characters.
          // by my count, only \r (charCode = 13) and \b (charCode = 8) are destructive in that sense.
          output.write(buffer.slice(i, i+1));
        }
      }

      output.write(visible.ANSI.RESET);
    }
  }
}

function onReadable() {
  var chunk = process.stdin.read(chunk_size);
  if (!interrupted && chunk !== null) {
    print(chunk);
    setImmediate(onReadable);
  }
}

process.stdin.on('end', function() {
  output.write(visible.ANSI.INVERT);
  output.write('EOF');
  output.write(visible.ANSI.RESET);

  process.stderr.write(os.EOL);
});

input.addListener('readable', onReadable);
process.on('SIGINT', function() {
  interrupted = true;
  input.removeListener('readable', onReadable);

  output.write(visible.ANSI.FG.RED);
  output.write('SIGINT');
  output.write(visible.ANSI.RESET);

  process.stderr.write(os.EOL);

  process.exit('SIGINT');
});

output.on('error', function(err) {
  // e.g., if we pipe into head or something
  visible.resetStream(process.stderr);
  process.exit();
});
